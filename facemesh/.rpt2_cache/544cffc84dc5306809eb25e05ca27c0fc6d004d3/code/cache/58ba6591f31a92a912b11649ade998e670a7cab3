{"code":"import * as blazeface from '@tensorflow-models/blazeface';\r\nimport * as tfconv from '@tensorflow/tfjs-converter';\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { MESH_ANNOTATIONS } from './keypoints';\r\nimport { Pipeline } from './pipeline';\r\nconst FACEMESH_GRAPHMODEL_PATH = 'https://tfhub.dev/mediapipe/tfjs-model/facemesh/1/default/1';\r\nconst MESH_MODEL_INPUT_WIDTH = 192;\r\nconst MESH_MODEL_INPUT_HEIGHT = 192;\r\nexport async function load({ maxContinuousChecks = 5, detectionConfidence = 0.9, maxFaces = 10, iouThreshold = 0.3, scoreThreshold = 0.75 } = {}) {\r\n    const [blazeFace, blazeMeshModel] = await Promise.all([\r\n        loadDetectorModel(maxFaces, iouThreshold, scoreThreshold), loadMeshModel()\r\n    ]);\r\n    const faceMesh = new FaceMesh(blazeFace, blazeMeshModel, maxContinuousChecks, detectionConfidence, maxFaces);\r\n    return faceMesh;\r\n}\r\nasync function loadDetectorModel(maxFaces, iouThreshold, scoreThreshold) {\r\n    return blazeface.load({ maxFaces, iouThreshold, scoreThreshold });\r\n}\r\nasync function loadMeshModel() {\r\n    return tfconv.loadGraphModel(FACEMESH_GRAPHMODEL_PATH, { fromTFHub: true });\r\n}\r\nfunction getInputTensorDimensions(input) {\r\n    return input instanceof tf.Tensor ? [input.shape[0], input.shape[1]] :\r\n        [input.height, input.width];\r\n}\r\nfunction flipFaceHorizontal(face, imageWidth) {\r\n    if (face.mesh instanceof tf.Tensor) {\r\n        const [topLeft, bottomRight, mesh, scaledMesh] = tf.tidy(() => {\r\n            const subtractBasis = tf.tensor1d([imageWidth - 1, 0, 0]);\r\n            const multiplyBasis = tf.tensor1d([1, -1, 1]);\r\n            return tf.tidy(() => {\r\n                return [\r\n                    tf.concat([\r\n                        tf.sub(imageWidth - 1, face.boundingBox.topLeft.slice(0, 1)),\r\n                        face.boundingBox.topLeft.slice(1, 1)\r\n                    ]),\r\n                    tf.concat([\r\n                        tf.sub(imageWidth - 1, face.boundingBox.bottomRight.slice(0, 1)),\r\n                        face.boundingBox.bottomRight.slice(1, 1)\r\n                    ]),\r\n                    tf.sub(subtractBasis, face.mesh).mul(multiplyBasis),\r\n                    tf.sub(subtractBasis, face.scaledMesh).mul(multiplyBasis)\r\n                ];\r\n            });\r\n        });\r\n        return Object.assign({}, face, { boundingBox: { topLeft, bottomRight }, mesh, scaledMesh });\r\n    }\r\n    return Object.assign({}, face, {\r\n        boundingBox: {\r\n            topLeft: [\r\n                imageWidth - 1 - face.boundingBox.topLeft[0],\r\n                face.boundingBox.topLeft[1]\r\n            ],\r\n            bottomRight: [\r\n                imageWidth - 1 - face.boundingBox.bottomRight[0],\r\n                face.boundingBox.bottomRight[1]\r\n            ]\r\n        },\r\n        mesh: face.mesh.map(coord => {\r\n            const flippedCoord = coord.slice(0);\r\n            flippedCoord[0] = imageWidth - 1 - coord[0];\r\n            return flippedCoord;\r\n        }),\r\n        scaledMesh: face.scaledMesh.map(coord => {\r\n            const flippedCoord = coord.slice(0);\r\n            flippedCoord[0] = imageWidth - 1 - coord[0];\r\n            return flippedCoord;\r\n        })\r\n    });\r\n}\r\nexport class FaceMesh {\r\n    constructor(blazeFace, blazeMeshModel, maxContinuousChecks, detectionConfidence, maxFaces) {\r\n        this.pipeline = new Pipeline(blazeFace, blazeMeshModel, MESH_MODEL_INPUT_WIDTH, MESH_MODEL_INPUT_HEIGHT, maxContinuousChecks, maxFaces);\r\n        this.detectionConfidence = detectionConfidence;\r\n    }\r\n    static getAnnotations() {\r\n        return MESH_ANNOTATIONS;\r\n    }\r\n    async estimateFaces(input, returnTensors = false, flipHorizontal = false) {\r\n        const [, width] = getInputTensorDimensions(input);\r\n        const image = tf.tidy(() => {\r\n            if (!(input instanceof tf.Tensor)) {\r\n                input = tf.browser.fromPixels(input);\r\n            }\r\n            return input.toFloat().expandDims(0);\r\n        });\r\n        const savedWebglPackDepthwiseConvFlag = tf.env().get('WEBGL_PACK_DEPTHWISECONV');\r\n        tf.env().set('WEBGL_PACK_DEPTHWISECONV', true);\r\n        const predictions = await this.pipeline.predict(image);\r\n        tf.env().set('WEBGL_PACK_DEPTHWISECONV', savedWebglPackDepthwiseConvFlag);\r\n        image.dispose();\r\n        if (predictions != null && predictions.length > 0) {\r\n            return Promise.all(predictions.map(async (prediction, i) => {\r\n                const { coords, scaledCoords, box, flag } = prediction;\r\n                let tensorsToRead = [flag];\r\n                if (!returnTensors) {\r\n                    tensorsToRead = tensorsToRead.concat([coords, scaledCoords, box.startPoint, box.endPoint]);\r\n                }\r\n                const tensorValues = await Promise.all(tensorsToRead.map(async (d) => d.array()));\r\n                const flagValue = tensorValues[0];\r\n                flag.dispose();\r\n                if (flagValue < this.detectionConfidence) {\r\n                    this.pipeline.clearRegionOfInterest(i);\r\n                }\r\n                if (returnTensors) {\r\n                    const annotatedPrediction = {\r\n                        faceInViewConfidence: flagValue,\r\n                        mesh: coords,\r\n                        scaledMesh: scaledCoords,\r\n                        boundingBox: {\r\n                            topLeft: box.startPoint.squeeze(),\r\n                            bottomRight: box.endPoint.squeeze()\r\n                        }\r\n                    };\r\n                    if (flipHorizontal) {\r\n                        return flipFaceHorizontal(annotatedPrediction, width);\r\n                    }\r\n                    return annotatedPrediction;\r\n                }\r\n                const [coordsArr, coordsArrScaled, topLeft, bottomRight] = tensorValues.slice(1);\r\n                scaledCoords.dispose();\r\n                coords.dispose();\r\n                let annotatedPrediction = {\r\n                    faceInViewConfidence: flagValue,\r\n                    boundingBox: { topLeft, bottomRight },\r\n                    mesh: coordsArr,\r\n                    scaledMesh: coordsArrScaled\r\n                };\r\n                if (flipHorizontal) {\r\n                    annotatedPrediction =\r\n                        flipFaceHorizontal(annotatedPrediction, width);\r\n                }\r\n                const annotations = {};\r\n                for (const key in MESH_ANNOTATIONS) {\r\n                    annotations[key] = MESH_ANNOTATIONS[key].map(index => annotatedPrediction.scaledMesh[index]);\r\n                }\r\n                annotatedPrediction['annotations'] = annotations;\r\n                return annotatedPrediction;\r\n            }));\r\n        }\r\n        return [];\r\n    }\r\n}\r\n//# sourceMappingURL=index.js.map","map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"src/index.ts\"],\"names\":[],\"mappings\":\"AAiBA,OAAO,KAAK,SAAS,MAAM,8BAA8B,CAAC;AAC1D,OAAO,KAAK,MAAM,MAAM,4BAA4B,CAAC;AACrD,OAAO,KAAK,EAAE,MAAM,uBAAuB,CAAC;AAE5C,OAAO,EAAC,gBAAgB,EAAC,MAAM,aAAa,CAAC;AAC7C,OAAO,EAAC,QAAQ,EAAa,MAAM,YAAY,CAAC;AAEhD,MAAM,wBAAwB,GAC1B,6DAA6D,CAAC;AAClE,MAAM,sBAAsB,GAAG,GAAG,CAAC;AACnC,MAAM,uBAAuB,GAAG,GAAG,CAAC;AA8CpC,MAAM,CAAC,KAAK,UAAU,IAAI,CAAC,EACzB,mBAAmB,GAAG,CAAC,EACvB,mBAAmB,GAAG,GAAG,EACzB,QAAQ,GAAG,EAAE,EACb,YAAY,GAAG,GAAG,EAClB,cAAc,GAAG,IAAI,EACtB,GAAG,EAAE;IACJ,MAAM,CAAC,SAAS,EAAE,cAAc,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QACpD,iBAAiB,CAAC,QAAQ,EAAE,YAAY,EAAE,cAAc,CAAC,EAAE,aAAa,EAAE;KAC3E,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,IAAI,QAAQ,CACzB,SAAS,EAAE,cAAc,EAAE,mBAAmB,EAAE,mBAAmB,EACnE,QAAQ,CAAC,CAAC;IACd,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,KAAK,UAAU,iBAAiB,CAC5B,QAAgB,EAAE,YAAoB,EACtC,cAAsB;IACxB,OAAO,SAAS,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,YAAY,EAAE,cAAc,EAAC,CAAC,CAAC;AAClE,CAAC;AAED,KAAK,UAAU,aAAa;IAC1B,OAAO,MAAM,CAAC,cAAc,CAAC,wBAAwB,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC;AAC5E,CAAC;AAED,SAAS,wBAAwB,CAAC,KAEiB;IACjD,OAAO,KAAK,YAAY,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClC,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;AAClE,CAAC;AAED,SAAS,kBAAkB,CACvB,IAAyB,EAAE,UAAkB;IAC/C,IAAI,IAAI,CAAC,IAAI,YAAY,EAAE,CAAC,MAAM,EAAE;QAClC,MAAM,CAAC,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;YAC5D,MAAM,aAAa,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,UAAU,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC1D,MAAM,aAAa,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAE9C,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;gBAClB,OAAO;oBACL,EAAE,CAAC,MAAM,CAAC;wBACR,EAAE,CAAC,GAAG,CACF,UAAU,GAAG,CAAC,EACb,IAAI,CAAC,WAAW,CAAC,OAAuB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBACzD,IAAI,CAAC,WAAW,CAAC,OAAuB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;qBACtD,CAAC;oBACF,EAAE,CAAC,MAAM,CAAC;wBACR,EAAE,CAAC,GAAG,CACF,UAAU,GAAG,CAAC,EACb,IAAI,CAAC,WAAW,CAAC,WAA2B,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBAC7D,IAAI,CAAC,WAAW,CAAC,WAA2B,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;qBAC1D,CAAC;oBACF,EAAE,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC;oBACnD,EAAE,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC;iBAC1D,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC,MAAM,CAChB,EAAE,EAAE,IAAI,EAAE,EAAC,WAAW,EAAE,EAAC,OAAO,EAAE,WAAW,EAAC,EAAE,IAAI,EAAE,UAAU,EAAC,CAAC,CAAC;KACxE;IAED,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE;QAC7B,WAAW,EAAE;YACX,OAAO,EAAE;gBACP,UAAU,GAAG,CAAC,GAAI,IAAI,CAAC,WAAW,CAAC,OAA4B,CAAC,CAAC,CAAC;gBACjE,IAAI,CAAC,WAAW,CAAC,OAA4B,CAAC,CAAC,CAAC;aAClD;YACD,WAAW,EAAE;gBACX,UAAU,GAAG,CAAC,GAAI,IAAI,CAAC,WAAW,CAAC,WAAgC,CAAC,CAAC,CAAC;gBACrE,IAAI,CAAC,WAAW,CAAC,WAAgC,CAAC,CAAC,CAAC;aACtD;SACF;QACD,IAAI,EAAG,IAAI,CAAC,IAAwC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC/D,MAAM,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACpC,YAAY,CAAC,CAAC,CAAC,GAAG,UAAU,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5C,OAAO,YAAY,CAAC;QACtB,CAAC,CAAC;QACF,UAAU,EACL,IAAI,CAAC,UAA8C,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC/D,MAAM,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACpC,YAAY,CAAC,CAAC,CAAC,GAAG,UAAU,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5C,OAAO,YAAY,CAAC;QACtB,CAAC,CAAC;KACP,CAAC,CAAC;AACL,CAAC;AAED,MAAM,OAAO,QAAQ;IAInB,YACI,SAAmC,EAAE,cAAiC,EACtE,mBAA2B,EAAE,mBAA2B,EACxD,QAAgB;QAClB,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,CACxB,SAAS,EAAE,cAAc,EAAE,sBAAsB,EACjD,uBAAuB,EAAE,mBAAmB,EAAE,QAAQ,CAAC,CAAC;QAE5D,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;IACjD,CAAC;IAED,MAAM,CAAC,cAAc;QACnB,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAeD,KAAK,CAAC,aAAa,CACf,KACiB,EACjB,aAAa,GAAG,KAAK,EACrB,cAAc,GAAG,KAAK;QACxB,MAAM,CAAC,EAAE,KAAK,CAAC,GAAG,wBAAwB,CAAC,KAAK,CAAC,CAAC;QAElD,MAAM,KAAK,GAAgB,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;YACtC,IAAI,CAAC,CAAC,KAAK,YAAY,EAAE,CAAC,MAAM,CAAC,EAAE;gBACjC,KAAK,GAAG,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;aACtC;YACD,OAAQ,KAAmB,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAMH,MAAM,+BAA+B,GACjC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;QAC7C,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,0BAA0B,EAAE,IAAI,CAAC,CAAC;QAC/C,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvD,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,0BAA0B,EAAE,+BAA+B,CAAC,CAAC;QAE1E,KAAK,CAAC,OAAO,EAAE,CAAC;QAEhB,IAAI,WAAW,IAAI,IAAI,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;YACjD,OAAO,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,UAAsB,EAAE,CAAC,EAAE,EAAE;gBACrE,MAAM,EAAC,MAAM,EAAE,YAAY,EAAE,GAAG,EAAE,IAAI,EAAC,GAAG,UAAU,CAAC;gBACrD,IAAI,aAAa,GAAgB,CAAC,IAAI,CAAC,CAAC;gBACxC,IAAI,CAAC,aAAa,EAAE;oBAClB,aAAa,GAAG,aAAa,CAAC,MAAM,CAChC,CAAC,MAAM,EAAE,YAAY,EAAE,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;iBAC3D;gBAED,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,GAAG,CAClC,aAAa,CAAC,GAAG,CAAC,KAAK,EAAE,CAAY,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC1D,MAAM,SAAS,GAAG,YAAY,CAAC,CAAC,CAAW,CAAC;gBAE5C,IAAI,CAAC,OAAO,EAAE,CAAC;gBACf,IAAI,SAAS,GAAG,IAAI,CAAC,mBAAmB,EAAE;oBACxC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;iBACxC;gBAED,IAAI,aAAa,EAAE;oBACjB,MAAM,mBAAmB,GAAwB;wBAC/C,oBAAoB,EAAE,SAAS;wBAC/B,IAAI,EAAE,MAAM;wBACZ,UAAU,EAAE,YAAY;wBACxB,WAAW,EAAE;4BACX,OAAO,EAAE,GAAG,CAAC,UAAU,CAAC,OAAO,EAAiB;4BAChD,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAiB;yBACnD;qBACF,CAAC;oBAEF,IAAI,cAAc,EAAE;wBAClB,OAAO,kBAAkB,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;qBACvD;oBAED,OAAO,mBAAmB,CAAC;iBAC5B;gBAED,MAAM,CAAC,SAAS,EAAE,eAAe,EAAE,OAAO,EAAE,WAAW,CAAC,GAC1C,YAAY,CAAC,KAAK,CAAC,CAAC,CAID,CAAC;gBAElC,YAAY,CAAC,OAAO,EAAE,CAAC;gBACvB,MAAM,CAAC,OAAO,EAAE,CAAC;gBAEjB,IAAI,mBAAmB,GAA8B;oBACnD,oBAAoB,EAAE,SAAS;oBAC/B,WAAW,EAAE,EAAC,OAAO,EAAE,WAAW,EAAC;oBACnC,IAAI,EAAE,SAAS;oBACf,UAAU,EAAE,eAAe;iBAC5B,CAAC;gBAEF,IAAI,cAAc,EAAE;oBAClB,mBAAmB;wBACf,kBAAkB,CAAC,mBAAmB,EAAE,KAAK,CACpB,CAAC;iBAC/B;gBAED,MAAM,WAAW,GACsC,EAAE,CAAC;gBAC1D,KAAK,MAAM,GAAG,IAAI,gBAAgB,EAAE;oBAClC,WAAW,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,GAAG,CACxC,KAAK,CAAC,EAAE,CAAC,mBAAmB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;iBACrD;gBACD,mBAAmB,CAAC,aAAa,CAAC,GAAG,WAAW,CAAC;gBAEjD,OAAO,mBAAmB,CAAC;YAC7B,CAAC,CAAC,CAAC,CAAC;SACL;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;CACF\"}","dts":{"name":"/Users/khushibhansali/Documents/SmartMirror/facemesh/index.d.ts","writeByteOrderMark":false,"text":"import * as blazeface from '@tensorflow-models/blazeface';\r\nimport * as tfconv from '@tensorflow/tfjs-converter';\r\nimport * as tf from '@tensorflow/tfjs-core';\r\ninterface AnnotatedPredictionValues {\r\n    faceInViewConfidence: number;\r\n    boundingBox: {\r\n        topLeft: [number, number];\r\n        bottomRight: [number, number];\r\n    };\r\n    mesh: Array<[number, number, number]>;\r\n    scaledMesh: Array<[number, number, number]>;\r\n    annotations?: {\r\n        [key: string]: Array<[number, number, number]>;\r\n    };\r\n}\r\ninterface AnnotatedPredictionTensors {\r\n    faceInViewConfidence: number;\r\n    boundingBox: {\r\n        topLeft: tf.Tensor1D;\r\n        bottomRight: tf.Tensor1D;\r\n    };\r\n    mesh: tf.Tensor2D;\r\n    scaledMesh: tf.Tensor2D;\r\n}\r\nexport declare type AnnotatedPrediction = AnnotatedPredictionValues | AnnotatedPredictionTensors;\r\nexport declare function load({ maxContinuousChecks, detectionConfidence, maxFaces, iouThreshold, scoreThreshold }?: {\r\n    maxContinuousChecks?: number;\r\n    detectionConfidence?: number;\r\n    maxFaces?: number;\r\n    iouThreshold?: number;\r\n    scoreThreshold?: number;\r\n}): Promise<FaceMesh>;\r\nexport declare class FaceMesh {\r\n    private pipeline;\r\n    private detectionConfidence;\r\n    constructor(blazeFace: blazeface.BlazeFaceModel, blazeMeshModel: tfconv.GraphModel, maxContinuousChecks: number, detectionConfidence: number, maxFaces: number);\r\n    static getAnnotations(): {\r\n        [key: string]: number[];\r\n    };\r\n    estimateFaces(input: tf.Tensor3D | ImageData | HTMLVideoElement | HTMLImageElement | HTMLCanvasElement, returnTensors?: boolean, flipHorizontal?: boolean): Promise<AnnotatedPrediction[]>;\r\n}\r\nexport {};\r\n"}}
