{"code":"import * as tf from '@tensorflow/tfjs-core';\r\nimport { createBox, cutBoxFromImageAndResize, disposeBox, enlargeBox, getBoxSize, scaleBoxCoordinates } from './box';\r\nconst LANDMARKS_COUNT = 468;\r\nconst UPDATE_REGION_OF_INTEREST_IOU_THRESHOLD = 0.25;\r\nexport class Pipeline {\r\n    constructor(boundingBoxDetector, meshDetector, meshWidth, meshHeight, maxContinuousChecks, maxFaces) {\r\n        this.regionsOfInterest = [];\r\n        this.runsWithoutFaceDetector = 0;\r\n        this.boundingBoxDetector = boundingBoxDetector;\r\n        this.meshDetector = meshDetector;\r\n        this.meshWidth = meshWidth;\r\n        this.meshHeight = meshHeight;\r\n        this.maxContinuousChecks = maxContinuousChecks;\r\n        this.maxFaces = maxFaces;\r\n    }\r\n    async predict(input) {\r\n        if (this.shouldUpdateRegionsOfInterest()) {\r\n            const returnTensors = true;\r\n            const annotateFace = false;\r\n            const { boxes, scaleFactor } = await this.boundingBoxDetector.getBoundingBoxes(input, returnTensors, annotateFace);\r\n            if (boxes.length === 0) {\r\n                scaleFactor.dispose();\r\n                this.clearAllRegionsOfInterest();\r\n                return null;\r\n            }\r\n            const scaledBoxes = boxes.map((prediction) => enlargeBox(scaleBoxCoordinates(prediction, scaleFactor)));\r\n            boxes.forEach(disposeBox);\r\n            this.updateRegionsOfInterest(scaledBoxes);\r\n            this.runsWithoutFaceDetector = 0;\r\n        }\r\n        else {\r\n            this.runsWithoutFaceDetector++;\r\n        }\r\n        return tf.tidy(() => {\r\n            return this.regionsOfInterest.map((box, i) => {\r\n                const face = cutBoxFromImageAndResize(box, input, [\r\n                    this.meshHeight, this.meshWidth\r\n                ]).div(255);\r\n                const [, flag, coords] = this.meshDetector.predict(face);\r\n                const coordsReshaped = tf.reshape(coords, [-1, 3]);\r\n                const normalizedBox = tf.div(getBoxSize(box), [this.meshWidth, this.meshHeight]);\r\n                const scaledCoords = tf.mul(coordsReshaped, normalizedBox.concat(tf.tensor2d([1], [1, 1]), 1))\r\n                    .add(box.startPoint.concat(tf.tensor2d([0], [1, 1]), 1));\r\n                const landmarksBox = this.calculateLandmarksBoundingBox(scaledCoords);\r\n                const previousBox = this.regionsOfInterest[i];\r\n                disposeBox(previousBox);\r\n                this.regionsOfInterest[i] = landmarksBox;\r\n                const prediction = {\r\n                    coords: coordsReshaped,\r\n                    scaledCoords,\r\n                    box: landmarksBox,\r\n                    flag: flag.squeeze()\r\n                };\r\n                return prediction;\r\n            });\r\n        });\r\n    }\r\n    updateRegionsOfInterest(boxes) {\r\n        for (let i = 0; i < boxes.length; i++) {\r\n            const box = boxes[i];\r\n            const previousBox = this.regionsOfInterest[i];\r\n            let iou = 0;\r\n            if (previousBox && previousBox.startPoint) {\r\n                const [boxStartX, boxStartY, boxEndX, boxEndY] = box.startEndTensor.arraySync()[0];\r\n                const [previousBoxStartX, previousBoxStartY, previousBoxEndX, previousBoxEndY] = previousBox.startEndTensor.arraySync()[0];\r\n                const xStartMax = Math.max(boxStartX, previousBoxStartX);\r\n                const yStartMax = Math.max(boxStartY, previousBoxStartY);\r\n                const xEndMin = Math.min(boxEndX, previousBoxEndX);\r\n                const yEndMin = Math.min(boxEndY, previousBoxEndY);\r\n                const intersection = (xEndMin - xStartMax) * (yEndMin - yStartMax);\r\n                const boxArea = (boxEndX - boxStartX) * (boxEndY - boxStartY);\r\n                const previousBoxArea = (previousBoxEndX - previousBoxStartX) *\r\n                    (previousBoxEndY - boxStartY);\r\n                iou = intersection / (boxArea + previousBoxArea - intersection);\r\n            }\r\n            if (iou > UPDATE_REGION_OF_INTEREST_IOU_THRESHOLD) {\r\n                disposeBox(box);\r\n            }\r\n            else {\r\n                this.regionsOfInterest[i] = box;\r\n                disposeBox(previousBox);\r\n            }\r\n        }\r\n        for (let i = boxes.length; i < this.regionsOfInterest.length; i++) {\r\n            disposeBox(this.regionsOfInterest[i]);\r\n        }\r\n        this.regionsOfInterest = this.regionsOfInterest.slice(0, boxes.length);\r\n    }\r\n    clearRegionOfInterest(index) {\r\n        if (this.regionsOfInterest[index] != null) {\r\n            disposeBox(this.regionsOfInterest[index]);\r\n            this.regionsOfInterest = [\r\n                ...this.regionsOfInterest.slice(0, index),\r\n                ...this.regionsOfInterest.slice(index + 1)\r\n            ];\r\n        }\r\n    }\r\n    clearAllRegionsOfInterest() {\r\n        for (let i = 0; i < this.regionsOfInterest.length; i++) {\r\n            disposeBox(this.regionsOfInterest[i]);\r\n        }\r\n        this.regionsOfInterest = [];\r\n    }\r\n    shouldUpdateRegionsOfInterest() {\r\n        const roisCount = this.regionsOfInterest.length;\r\n        const noROIs = roisCount === 0;\r\n        if (this.maxFaces === 1 || noROIs) {\r\n            return noROIs;\r\n        }\r\n        return roisCount !== this.maxFaces &&\r\n            this.runsWithoutFaceDetector >= this.maxContinuousChecks;\r\n    }\r\n    calculateLandmarksBoundingBox(landmarks) {\r\n        const xs = landmarks.slice([0, 0], [LANDMARKS_COUNT, 1]);\r\n        const ys = landmarks.slice([0, 1], [LANDMARKS_COUNT, 1]);\r\n        const boxMinMax = tf.stack([xs.min(), ys.min(), xs.max(), ys.max()]);\r\n        const box = createBox(boxMinMax.expandDims(0));\r\n        return enlargeBox(box);\r\n    }\r\n}\r\n//# sourceMappingURL=pipeline.js.map","map":"{\"version\":3,\"file\":\"pipeline.js\",\"sourceRoot\":\"\",\"sources\":[\"src/pipeline.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/khushibhansali/Documents/SmartMirror/facemesh/pipeline.d.ts","writeByteOrderMark":false,"text":"import * as blazeface from '@tensorflow-models/blazeface';\r\nimport * as tfconv from '@tensorflow/tfjs-converter';\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { Box } from './box';\r\nexport declare type Prediction = {\r\n    coords: tf.Tensor2D;\r\n    scaledCoords: tf.Tensor2D;\r\n    box: Box;\r\n    flag: tf.Scalar;\r\n};\r\nexport declare class Pipeline {\r\n    private boundingBoxDetector;\r\n    private meshDetector;\r\n    private meshWidth;\r\n    private meshHeight;\r\n    private maxContinuousChecks;\r\n    private maxFaces;\r\n    private regionsOfInterest;\r\n    private runsWithoutFaceDetector;\r\n    constructor(boundingBoxDetector: blazeface.BlazeFaceModel, meshDetector: tfconv.GraphModel, meshWidth: number, meshHeight: number, maxContinuousChecks: number, maxFaces: number);\r\n    predict(input: tf.Tensor4D): Promise<Prediction[]>;\r\n    updateRegionsOfInterest(boxes: Box[]): void;\r\n    clearRegionOfInterest(index: number): void;\r\n    clearAllRegionsOfInterest(): void;\r\n    shouldUpdateRegionsOfInterest(): boolean;\r\n    calculateLandmarksBoundingBox(landmarks: tf.Tensor): Box;\r\n}\r\n"}}
